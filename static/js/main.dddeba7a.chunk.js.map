{"version":3,"sources":["hooks/useGiphy.ts","components/TextField/TextField.styled.ts","components/TextField/TextField.tsx","components/Button/Button.styled.ts","components/Button/Button.tsx","components/ButtonSwitcher/ButtonSwitcher.tsx","components/Image/Image.styled.ts","components/Image/Image.tsx","hooks/useTextFieldWithFilter.ts","pages/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useGiphy","api_key","useState","images","setImages","load","tags","url","tag","NOT_FOUND","Promise","resolve","reject","promises","map","fetch","all","then","responses","response","json","jsons","filter","data","image_url","length","id","reduce","acc","srcs","trim","toLowerCase","join","complex","img","newImages","catch","reason","clear","group","Map","image","get","set","Array","from","entries","StyledTextField","styled","input","attrs","props","type","TextField","other","StyledButton","button","disabled","css","primary","secondary","Button","children","ButtonSwitcher","on","off","switched","onSwitch","switchedState","setSwitchedState","onClick","MAX_WIDTH","StyledImageContainer","div","Image","link","i","src","alt","useTextFieldWithFilter","value","setValue","bind","onChange","e","target","MainPage","giphy","loading","setLoading","grouped","setGrouped","textFieldWithFilter","text","replaceAll","useEffect","timer","setTimeout","randomTag","Math","floor","random","alert","clearTimeout","onImageClick","className","placeholder","split","group_index","onLoad","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dddeba7a.chunk.js","sourcesContent":["import {useState} from \"react\";\n\ntype Image = {\n  id: string,\n  srcs: string[],\n  tag: string,\n  complex: boolean,\n}\n\nconst useGiphy = (api_key: string) => {\n\n  const [images, setImages] = useState<Image[]>([]);\n\n  const load = (...tags: string[]) => {\n    const url = (tag: string) => `https://api.giphy.com/v1/gifs/random?api_key=${api_key}&tag=${tag}`;\n\n    const NOT_FOUND = 'По тегу ничего не найдено';\n\n    return new Promise((resolve, reject) => {\n      const promises = tags.map(tag => fetch(url(tag)));\n\n      Promise.all(promises)\n        .then(responses => Promise.all(responses.map(response => response.json())))\n        .then(jsons => jsons.filter(json => json.data.image_url))\n        .then(jsons => {\n          if (jsons.length !== promises.length) {\n            throw NOT_FOUND;\n          }\n          return jsons;\n        })\n        .then(jsons => ({\n          id: jsons.reduce((acc, json) => acc + json.data.id, ''),\n          srcs: jsons.reduce((acc, json) => [...acc, json.data.image_url], []),\n          tag: tags.map(tag => tag.trim().toLowerCase()).join(', '),\n          complex: tags.length > 1,\n        }))\n        .then(img => {\n            const newImages = [img, ...images];\n            setImages(newImages);\n            resolve(newImages);\n          }\n        )\n        .catch(reason => {\n          reject(reason === NOT_FOUND ? reason : 'Произошла HTTP ошибка');\n        });\n    });\n  };\n\n  const clear = () => {\n    setImages([]);\n  };\n\n  const group = () => {\n    const map = new Map();\n    for (const image of images) {\n      if (!map.get(image.tag)) {\n        map.set(image.tag, []);\n      }\n      map.set(image.tag, [...map.get(image.tag), image]);\n    }\n    return Array.from(map.entries());\n  };\n\n  return {\n    images,\n    load,\n    clear,\n    group,\n  };\n};\n\nexport default useGiphy;","import styled from \"styled-components\";\n\nexport const StyledTextField = styled.input.attrs(props => ({\n  type: 'text',\n}))`\n  padding: 5px 10px;\n  font-size: 15px;\n  border: 1px solid #eaeaea;\n  border-radius: 3px;\n  flex: 1;\n`;","import React, {InputHTMLAttributes} from \"react\";\nimport {StyledTextField} from \"./TextField.styled\";\n\nfunction TextField(props: InputHTMLAttributes<HTMLInputElement>) {\n  const {type, ...other} = props;\n\n  return (\n    <StyledTextField {...other} />\n  );\n}\n\nexport default TextField;","import styled, {css} from \"styled-components\";\nimport {ButtonProps} from './Button.d';\n\nexport const StyledButton = styled.button<ButtonProps>`\n  border: none;\n  background: #eeeeee;\n  outline: none;\n  color: rgb(63, 69, 74);\n  padding: 10px 15px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: 0.1s;\n\n  ${props => !props.disabled && css`\n    &:hover {\n      opacity: 0.8;\n    }\n\n    &:active {\n      opacity: 0.7;\n    }\n  `}\n\n  ${props => props.primary && css`\n    background: rgb(0, 108, 255);\n    color: white;\n  `}\n\n  ${props => props.secondary && css`\n    background: rgb(255, 0, 103);\n    color: white;\n  `}\n\n  ${props => props.disabled && css`\n    color: #b8b8b8;\n    background: rgb(241, 241, 241);\n    cursor: auto;\n  `}\n`;","import React from \"react\";\nimport {ButtonProps} from './Button.d'\nimport {StyledButton} from \"./Button.styled\";\n\nfunction Button(props: ButtonProps) {\n  return (\n    <StyledButton {...props}>\n      {props.children}\n    </StyledButton>\n  );\n}\n\nexport default Button;","import React, {useState} from \"react\";\nimport Button from \"../Button/Button\";\nimport {ButtonSwitcherProps} from './ButtonSwitcher.d'\n\nfunction ButtonSwitcher(props: ButtonSwitcherProps) {\n  const {on, off, switched, onSwitch, ...other} = props;\n\n  const [switchedState, setSwitchedState] = useState(switched ?? false);\n\n  const onClick = () => {\n    onSwitch && onSwitch();\n    setSwitchedState(!switchedState);\n  }\n\n  return <Button {...other} onClick={onClick}>{switchedState ? on : off}</Button>\n}\n\nexport default ButtonSwitcher;","import styled from \"styled-components\";\n\nconst MAX_WIDTH = '200px';\nconst MAX_HEIGHT = '200px';\n\nexport const StyledImageContainer = styled.div`\n  max-width: ${MAX_WIDTH};\n  display: inline-block;\n  padding: 5px;\n  border: 1px solid #eaeaea;\n  cursor: pointer;\n\n  & * {\n    max-width: ${MAX_WIDTH};\n    max-height: ${MAX_HEIGHT};\n  }\n`;","import React from \"react\";\nimport {ImageProps} from './Image.d';\nimport {StyledImageContainer} from './Image.styled';\n\nfunction Image(props: ImageProps) {\n  const {srcs, ...other} = props;\n\n  return (\n    <StyledImageContainer>\n      {srcs.length > 1 ? srcs.map((link, i) => <img key={i} src={link} {...other} alt={link}/>) :\n        <img src={srcs[0]} {...other} alt={srcs[0]}/>}\n    </StyledImageContainer>\n  );\n}\n\nexport default Image;","import {useState} from \"react\";\n\nfunction useTextFieldWithFilter(filter: (_: string) => string) {\n  const [value, setValue] = useState('');\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(filter(e.target.value));\n  };\n\n  return {\n    bind: {\n      value,\n      onChange,\n    },\n    value,\n    setValue,\n  };\n}\n\nexport default useTextFieldWithFilter;","import React, {useEffect, useState} from \"react\";\nimport '../scss/index.scss';\n\nimport useGiphy from \"../hooks/useGiphy\";\nimport TextField from \"../components/TextField/TextField\";\nimport Button from \"../components/Button/Button\";\nimport ButtonSwitcher from \"../components/ButtonSwitcher/ButtonSwitcher\";\nimport Image from \"../components/Image/Image\";\nimport useTextFieldWithFilter from \"../hooks/useTextFieldWithFilter\";\n\nfunction MainPage() {\n  const giphy = useGiphy('gTJAO48YcpmrADUyo4opy4ES4g7iDBxx');\n\n  const [loading, setLoading] = useState(false);\n  const [grouped, setGrouped] = useState(false);\n\n  const textFieldWithFilter = useTextFieldWithFilter((text) => text\n    .replaceAll(/[^A-Za-z,]/g, '')\n    .replaceAll(/,+/g, ',')\n    .toLowerCase());\n\n  useEffect(() => {\n    if (textFieldWithFilter.value !== 'delay') {\n      return;\n    }\n\n    const delay = () => {\n      const tags = ['cat', 'dog', 'mouse', 'frog', 'human'];\n      const randomTag = tags[Math.floor(Math.random() * (tags.length - 1))];\n\n      setLoading(true);\n      giphy.load(randomTag).catch(reason => {\n        alert(reason);\n        setLoading(false);\n      });\n    }\n\n    const timer = setTimeout(delay, 5000);\n\n    return () => clearTimeout(timer);\n  }, [giphy, textFieldWithFilter])\n\n  const load = () => {\n    if (!textFieldWithFilter.value) {\n      alert('Заполните поле \"Тег\"');\n      return;\n    }\n\n    setLoading(true);\n    textFieldWithFilter.setValue('');\n    giphy.load(...textFieldWithFilter.value.split(',')).catch(reason => {\n      alert(reason);\n      setLoading(false);\n    });\n  };\n\n  const clear = () => {\n    giphy.clear();\n    setLoading(false);\n    textFieldWithFilter.setValue('');\n  };\n\n  const switchGrouped = () => {\n    setGrouped(!grouped);\n  };\n\n  const onImageClick = (tag: string) => {\n    textFieldWithFilter.setValue(tag);\n  };\n\n  return (\n    <div className='page-container'>\n      <div className='page-controls'>\n        <TextField {...textFieldWithFilter.bind} placeholder='Введите теги через запятую'/>\n\n        <div className='buttons'>\n          <Button primary disabled={loading} onClick={load}>{loading ? 'Загрузка...' : 'Загрузить'}</Button>\n          <Button secondary onClick={clear}>Очистить</Button>\n          <ButtonSwitcher on={'Разгруппировать'} off={'Группировать'} onSwitch={switchGrouped}/>\n        </div>\n      </div>\n\n      <div className='images-grid'>\n        {grouped ? giphy.group().map(([tag, images], group_index) => (\n          <div key={group_index} className='group'>\n            <h4>{tag}</h4>\n            <div className='group-container'>\n              {images.map((image: any) => (\n                <Image onClick={() => onImageClick(image.tag)} onLoad={() => setLoading(false)} key={image.id}\n                       srcs={image.srcs}/>\n              ))}\n            </div>\n          </div>\n        )) : giphy.images.map(image => (\n          <Image onClick={() => onImageClick(image.tag)} onLoad={() => setLoading(false)} key={image.id}\n                 srcs={image.srcs}/>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default MainPage;","import React from 'react';\nimport MainPage from \"./pages/MainPage\";\n\nfunction App() {\n  return <MainPage />\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}